---
- name: "install qeme and libvrt related stuff"
  apt:
    name: [qemu-kvm, libvirt-clients, libvirt-daemon-system, bridge-utils, libvirt-dev]
    update_cache: true
    state: latest


- name: "install python modules"
  pip:
    name: [libvirt-python, lxml]

- name: "setup kvm directory"
  mount:
    path: /mnt/kvm
    src: "{{storage.device}}p1"
    fstype: ext4
    state: mounted

- name: "generate install iso"
  include_role:
    name: kickstartvm
  loop: "{{virtual_machines}}"
  loop_control:
    loop_var: virtual_machine

- debug:
    var: virtual_machines

- include: undefine.yml

- name: "install virtual machine"
  include_role:
    name: ansible-kvm
  vars:
    kvm_images_path: /mnt/kvm

    kvm_virtual_networks:
      - name: "{{virtual_machine.network}}"
        mode: bridge
        bridge_name: "{{virtual_machine.network}}"
        autostart: true
        state: active
    kvm_vms:
      - name: "{{inventory_hostname}}-{{virtual_machine.name}}"
        autostart: true
        # Define boot devices in order of preference
        boot_devices:
          - hd
          - cdrom
        graphics: true
        # Define disks in MB
        disks:
          # ide, scsi, virtio, xen, usb, sata or sd
          - disk_driver: virtio
            name: "{{inventory_hostname}}-{{virtual_machine.name}}.disk"
            size: "{{virtual_machine.storage_size}}"

          # define a cdrom with a specific iso
          - disk_driver: qemu
            image: "{{git.directory}}/makeiso/{{inventory_hostname}}-{{virtual_machine.name}}.iso"
            cdrom: true

        # Define memory in MB
        memory: "{{virtual_machine.memory}}"
        network_interfaces:
          - source: "{{virtual_machine.network}}"
            network_driver: virtio
            type: bridge
        state: running
        vcpu: "{{virtual_machine.cpus}}"

    # Define KVM Dir type Storage Pools to create
    kvm_storage_pools:
      - name: kvms
        path: /mnt/kvm/
        autostart: true
        state: active

    kvm_config_storage_pools: true

    kvm_enable_libvirtd_syslog: true

    kvm_manage_vms: true

    # Defines if kvm/libvirt should be configured
    kvm_config: true

    # Defines if kvm_users should be added to libvirtd for managing KVM
    kvm_config_users: true

    # Defines if kvm virtual networks should be configured
    # if set to true ensu
    kvm_config_virtual_networks: true

  loop: "{{virtual_machines}}"
  loop_control:
    loop_var: virtual_machine

- name: wait for the vm to shut down after install
  virt:
    command: status
    name: "{{inventory_hostname}}-{{virtual_machine.name}}"
  register: vmstatus
  until: vmstatus.status == 'shutdown'
  delegate_to: "{{ inventory_hostname }}"
  retries: 1000
  delay: 60

  loop: "{{virtual_machines}}"
  loop_control:
    loop_var: virtual_machine

- name: start virtual machines"
  virt:
    name: "{{inventory_hostname}}-{{virtual_machine.name}}"
    state: running
  loop: "{{virtual_machines}}"
  loop_control:
    loop_var: virtual_machine

- name: Wait 300 seconds for port 22 to become open and contain "OpenSSH"
  wait_for:
    port: 22
    host: "{{inventory_hostname}}-{{virtual_machine.name}}"
    search_regex: OpenSSH
    delay: 10
  vars:
    ansible_connection: local
  loop: "{{virtual_machines}}"
  loop_control:
    loop_var: virtual_machine

- name: track installed KVMs and build a new inventory file
  when:  virtual_machine.group
  include_role:
    name: inventory
  vars:
    hostname: "{{inventory_hostname}}-{{virtual_machine.name}}"
    group: "{{virtual_machine.group}}"
  loop: "{{virtual_machines}}"
  loop_control:
    loop_var: virtual_machine