---
- debug:
    var: virtual_machines
  tags:
    - install_kvm

- name: "install qeme and libvrt related stuff"
  apt:
    name: [qemu-kvm, libvirt-clients, libvirt-daemon-system, bridge-utils, libvirt-dev]
    state: latest

- name: "install python modules"
  pip:
    name: [libvirt-python, lxml]

- name: "setup kvm directory"
  mount:
    path: /mnt/kvm
    src: "{{storage.device}}p1"
    fstype: ext4
    state: mounted
  when: "{{ storage.system}} | default(false) | bool == false"

- name: "setup kvm directory with no mount"
  file:
    path: /mnt/kvm
    state: directory
  when: "{{ storage.system}} | default(false) | bool == true"

- name: "setup kvm directory permissions"
  file:
    path: /mnt/kvm
    state: touch
    mode: u+rw,g-wx,o-rw

- name: "generate install iso"
  block:
    - include_role:
        name: kickstartvm
      loop: "{{virtual_machines}}"
      loop_control:
        loop_var: virtual_machine
  tags:
    - kickstart

- name: List remote VMs
  virt:
    command: list_vms
  register: vms_list
  tags:
    - install_kvm

- set_fact:
    vms_list: "{{vms_list.list_vms}}"
  tags:
    - install_kvm

- debug:
    var: vms_list

- include: undefine.yml
  tags:
    - never
    - drop_kvm

- include: gateway.yml
  tags:
    - install_kvm

- include: vm.yml
  tags:
    - install_kvm

- name: "wait for the vm to shut down after install {{inventory_hostname}}-{{virtual_machine.name}}"
  virt:
    command: status
    name: "{{inventory_hostname}}-{{virtual_machine.name}}"
  register: vmstatus
  until: "'status' in vmstatus and vmstatus.status == 'shutdown'"
  delegate_to: "{{ inventory_hostname }}"
  retries: 1000
  delay: 5

  loop: "{{virtual_machines}}"
  loop_control:
    loop_var: virtual_machine
  tags:
    - install_kvm
  when: "inventory_hostname + '-' + virtual_machine.name not in vms_list"

- name: start virtual machines
  virt:
    name: "{{inventory_hostname}}-{{virtual_machine.name}}"
    state: running
  loop: "{{virtual_machines}}"
  loop_control:
    loop_var: virtual_machine
  tags:
    - install_kvm
    - generate_inventory
    - kvm_cluster

- name: wait for vm to be up and running
  virt:
    name: "{{inventory_hostname}}-{{virtual_machine.name}}"
    command: status
    uri: "qemu:///session"
  register: result
  until: result.status == 'running'
  delay: 1
  retries: 1000
  loop: "{{virtual_machines}}"
  loop_control:
    loop_var: virtual_machine
  tags:
    - install_kvm
    - generate_inventory
    - kvm_cluster

- name: generate list of configured and running virtual machines
  set_fact:
    deployed_vms: "{{ deployed_vms | default([]) + [{'name': inventory_hostname + '-' + virtual_machine.name, 'group' : virtual_machine.group, 'domain':virtual_machine.domain, 'node' : inventory_hostname, 'manager' : 'docker_swarm_manager' in group_names and virtual_machine.manager_possible  }]}}"
  loop: "{{virtual_machines}}"
  loop_control:
    loop_var: virtual_machine
  tags:
    - generate_inventory
    - kvm_cluster

  ##
  # here we somehow need to combine all the host variables into 1
  # - name: aggregate into one varaible
- name: generate empty list, if no virtaul machine is defined
  set_fact:
    deployed_vms: []
  when: deployed_vms is not defined
  tags:
    - generate_inventory
    - kvm_cluster


##
# this builds new environment files

- name: track installed KVMs in the internal inventory
  block:
    - include_role:
        name: inventory
      vars:
        hostname: "{{virtual_machine.name}}"
        domain: "{{virtual_machine.domain}}"
        group: "{{virtual_machine.group}}"
      loop: "{{deployed_vms}}"
      loop_control:
        loop_var: virtual_machine
  tags:
    - generate_inventory
    - kvm_cluster
  delegate_to: 127.0.0.1

- name: "install jmespath locally"
  pip:
    name: jmespath
  tags:
    - generate_inventory
    - kvm_cluster
  delegate_to: 127.0.0.1

- name: "generate empty list"
  set_fact:
    clusters_to_generate: []
  tags:
    - generate_inventory
    - kvm_cluster
  delegate_to: 127.0.0.1

- name: "generate names of clusters"
  when: "{{ 'cluster_file' in hostvars[ item ] }}"
  set_fact:
    clusters_to_generate: "{{ clusters_to_generate + [ hostvars[ item ][ 'cluster_file' ] ] }}"
  tags:
    - generate_inventory
    - kvm_cluster
  with_inventory_hostnames:
    - all
  run_once: true
  delegate_to: 127.0.0.1

- name: "strip duplicates"
  set_fact:
    clusters_to_generate: "{{ clusters_to_generate | unique }}"
  tags:
    - generate_inventory
    - kvm_cluster
  run_once: true
  delegate_to: 127.0.0.1

- debug:
    var: clusters_to_generate
  tags:
    - generate_inventory
    - kvm_cluster

  run_once: true
  delegate_to: 127.0.0.1
- name: "generate inventory files for all defined clusters"
  template:
    src: inventory.ini.j2
    dest: "./cluster-{{cluster}}.ini"
    force: yes
  delegate_to: 127.0.0.1
  loop: "{{clusters_to_generate}}"
  loop_control:
    loop_var: cluster
  tags:
    - generate_inventory
    - kvm_cluster
  run_once: true
